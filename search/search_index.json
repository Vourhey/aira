{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Web3 Framework for smart cities and industry 4.0 app developers The idea of the network is to connect a particular service and a Dapp user interface. The following chart describes what place Robonmics takes in the scenario. Try it out yourself here ! What the documentation contains I'm interested in using Robonomics services Take a look at the Robonomics Dapp . Get familiar with the statistic, average miner reward etc. Try out existing services I'm a Dapp developer There are Robonomics-js library and dapp template I'm a robotics engineer Links: Install AIRA Messages FAQ etc... Sensor Demo Let's start from a quick example of what Robonomics is able to do within 5 minutes. Requirements: Metamask extension Open sensor demo website and follow instructions below 1. Open the Dapp You see the next picture in case you don't have MetaMask extension. Go to the link provided above and install one 2. Allow connection to the extension 3. Press \"Request current values\" 4. Sign a message. No token or ether are needed 5. Wait until the agent collects the data and sends it back 6. Wait until the Dapp downloads the result file from IPFS 7. Look at the data Just now you have broadcasted a demand message and got a result from an autonomous agent! The result file is stored in IPFS, the result message is signed with the agent's private key.","title":"Getting Started"},{"location":"#getting-started","text":"Web3 Framework for smart cities and industry 4.0 app developers The idea of the network is to connect a particular service and a Dapp user interface. The following chart describes what place Robonmics takes in the scenario. Try it out yourself here !","title":"Getting Started"},{"location":"#what-the-documentation-contains","text":"","title":"What the documentation contains"},{"location":"#im-interested-in-using-robonomics-services","text":"Take a look at the Robonomics Dapp . Get familiar with the statistic, average miner reward etc. Try out existing services","title":"I'm interested in using Robonomics services"},{"location":"#im-a-dapp-developer","text":"There are Robonomics-js library and dapp template","title":"I'm a Dapp developer"},{"location":"#im-a-robotics-engineer","text":"Links: Install AIRA Messages FAQ etc...","title":"I'm a robotics engineer"},{"location":"#sensor-demo","text":"Let's start from a quick example of what Robonomics is able to do within 5 minutes. Requirements: Metamask extension Open sensor demo website and follow instructions below","title":"Sensor Demo"},{"location":"#1-open-the-dapp","text":"You see the next picture in case you don't have MetaMask extension. Go to the link provided above and install one","title":"1. Open the Dapp"},{"location":"#2-allow-connection-to-the-extension","text":"","title":"2. Allow connection to the extension"},{"location":"#3-press-request-current-values","text":"","title":"3. Press \"Request current values\""},{"location":"#4-sign-a-message-no-token-or-ether-are-needed","text":"","title":"4. Sign a message. No token or ether are needed"},{"location":"#5-wait-until-the-agent-collects-the-data-and-sends-it-back","text":"","title":"5. Wait until the agent collects the data and sends it back"},{"location":"#6-wait-until-the-dapp-downloads-the-result-file-from-ipfs","text":"","title":"6. Wait until the Dapp downloads the result file from IPFS"},{"location":"#7-look-at-the-data","text":"Just now you have broadcasted a demand message and got a result from an autonomous agent! The result file is stored in IPFS, the result message is signed with the agent's private key.","title":"7. Look at the data"},{"location":"basic_usage/","text":"Basic Usage To get familiar with AIRA, let's see what is under the hood. Once you launch the client several ros nodes will already be on the run. Here's a list of robonomics communication stack nodes:: $ rosnode list /eth/erc20_token /eth/eth_node /graph/aira_graph /liability/executor /liability/infochan/eth/signer /liability/infochan/ipfs_channel /liability/persistence /liability/listener /rosout /eth/erc20_token , /eth/eth_node - proved services for Ethereum blockchain and ERC20 tokens /graph/aira_graph - service node for exploring other AIRA instances /liability/executor - gets rosbag file from IPFS and plays it /liability/infochan/ipfs_channel - is responsible for offer, demand and result messages. It catches messages from the channel and sends signed messages back /liability/infochan/eth/signer - offers services for signing offer, demand and result messages /liability/listener - watches for a new liability contracts. When the event is received the node calls executor node /liability/persistence - helps to store incoming liabilities and restart them after shutdown And here's a list of robonomics stack topics. .. code-block:: bash $ rostopic list /eth/event/approval /eth/event/transfer /graph/greetings /liability/complete /liability/finalized /liability/incoming /liability/infochan/eth/sending/demand /liability/infochan/eth/sending/offer /liability/infochan/eth/sending/result /liability/infochan/eth/signing/demand /liability/infochan/eth/signing/offer /liability/infochan/eth/signing/result /liability/infochan/incoming/demand /liability/infochan/incoming/offer /liability/infochan/incoming/result /liability/persistence/add /liability/persistence/del /liability/persistence/update_timestamp /liability/ready /liability/result /rosout /rosout_agg The most important topics for us are: /liability/incoming - when a new liability is created, this topic publishes Ethereum address of the contract /liability/result - this topic is for publishing results. But don't publish a result directly to this topic! Use a service instead /liability/infochan/incoming/* - a CPS gets information about offer, demand or result from corresponding topics /liability/infochan/eth/signing/* - a CPS sends offer, demand or result messages to corresponding topics For the details check out the API page <api/robonomics_liability.html> _. Let's start with greetings - say hello to AIRA! You should just launch a pre-installed package hello_aira :: $ rosrun hello_aira hello_aira We've launched our agent. It will wait for a demand message. Now it's time to send the message. Go to dapp <https://airalab.github.io/robonomics_tutorials/> _ and press Order. Now go back to the console and see the result!","title":"Basic Usage"},{"location":"basic_usage/#basic-usage","text":"To get familiar with AIRA, let's see what is under the hood. Once you launch the client several ros nodes will already be on the run. Here's a list of robonomics communication stack nodes:: $ rosnode list /eth/erc20_token /eth/eth_node /graph/aira_graph /liability/executor /liability/infochan/eth/signer /liability/infochan/ipfs_channel /liability/persistence /liability/listener /rosout /eth/erc20_token , /eth/eth_node - proved services for Ethereum blockchain and ERC20 tokens /graph/aira_graph - service node for exploring other AIRA instances /liability/executor - gets rosbag file from IPFS and plays it /liability/infochan/ipfs_channel - is responsible for offer, demand and result messages. It catches messages from the channel and sends signed messages back /liability/infochan/eth/signer - offers services for signing offer, demand and result messages /liability/listener - watches for a new liability contracts. When the event is received the node calls executor node /liability/persistence - helps to store incoming liabilities and restart them after shutdown And here's a list of robonomics stack topics. .. code-block:: bash $ rostopic list /eth/event/approval /eth/event/transfer /graph/greetings /liability/complete /liability/finalized /liability/incoming /liability/infochan/eth/sending/demand /liability/infochan/eth/sending/offer /liability/infochan/eth/sending/result /liability/infochan/eth/signing/demand /liability/infochan/eth/signing/offer /liability/infochan/eth/signing/result /liability/infochan/incoming/demand /liability/infochan/incoming/offer /liability/infochan/incoming/result /liability/persistence/add /liability/persistence/del /liability/persistence/update_timestamp /liability/ready /liability/result /rosout /rosout_agg The most important topics for us are: /liability/incoming - when a new liability is created, this topic publishes Ethereum address of the contract /liability/result - this topic is for publishing results. But don't publish a result directly to this topic! Use a service instead /liability/infochan/incoming/* - a CPS gets information about offer, demand or result from corresponding topics /liability/infochan/eth/signing/* - a CPS sends offer, demand or result messages to corresponding topics For the details check out the API page <api/robonomics_liability.html> _. Let's start with greetings - say hello to AIRA! You should just launch a pre-installed package hello_aira :: $ rosrun hello_aira hello_aira We've launched our agent. It will wait for a demand message. Now it's time to send the message. Go to dapp <https://airalab.github.io/robonomics_tutorials/> _ and press Order. Now go back to the console and see the result!","title":"Basic Usage"},{"location":"connecting_via_ssh/","text":"Connecting via SSH It is more convenient to work with virtual machine via ssh connection. In this section we will configure VM. .. attention:: It's required to have your ssh public key on Github.com In case you don't have one, please follow the `link <https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/>`_ First, launch AIRA client and run a command replacing with your own:: $ mkdir .ssh $ chmod 700 .ssh $ curl -sSL https://github.com/<username>.keys >> .ssh/authorized_keys Now go to machine settings, network, open Advanced and then Port Forwarding .. image:: img/4.png :alt: Port forwarding :align: center Add a new rule: +-----------+-----------+-----------+------------+ | Host IP | Host Port | Guest IP | Guest Port | +===========+===========+===========+============+ | 127.0.1.1 | 2202 | 10.0.2.15 | 22 | +-----------+-----------+-----------+------------+ Reboot the machine and you are able to connect to AIRA client via ssh:: $ ssh - p 2202 root @127.0.1.1","title":"Connecting via SSH"},{"location":"connecting_via_ssh/#connecting-via-ssh","text":"It is more convenient to work with virtual machine via ssh connection. In this section we will configure VM. .. attention:: It's required to have your ssh public key on Github.com In case you don't have one, please follow the `link <https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/>`_ First, launch AIRA client and run a command replacing with your own:: $ mkdir .ssh $ chmod 700 .ssh $ curl -sSL https://github.com/<username>.keys >> .ssh/authorized_keys Now go to machine settings, network, open Advanced and then Port Forwarding .. image:: img/4.png :alt: Port forwarding :align: center Add a new rule: +-----------+-----------+-----------+------------+ | Host IP | Host Port | Guest IP | Guest Port | +===========+===========+===========+============+ | 127.0.1.1 | 2202 | 10.0.2.15 | 22 | +-----------+-----------+-----------+------------+ Reboot the machine and you are able to connect to AIRA client via ssh:: $ ssh - p 2202 root @127.0.1.1","title":"Connecting via SSH"},{"location":"contributing/","text":"Contributing Main Airalab repositories ~~~~~~~~~~~~~~~~~~~~~~~~~ aira <https://github.com/airalab/aira> _ - AIRA client. robonomics_comm <https://github.com/airalab/robonomics_comm> _ - Robonomics communication stack robonomics_contracts <https://github.com/airalab/robonomics_contracts> _ - smart contracts of Robonomics network Please choose a corresponding repository for reporting an issue! Found a bug? ~~~~~~~~~~~~~~~~~~~ Make sure the bug was not already reported - check GitHub Issues <https://github.com/airalab/aira/issues> _. If there is no open issue addressing the problem, open a new one <https://github.com/airalab/aira/issues/new> _. Be sure to include a title and clear description , as much relevant information as possible. Also, you can open an issue if you have a proposal for improvements. Wrote a patch that fixes a bug? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Open a new GitHub pull request with the patch. Make sure the PR description clearly describes the problem and the solution. Include the relevant issue number if applicable. Please don't fix whitespace, format code, or make a purely cosmetic patch Thanks!","title":"Contributing"},{"location":"contributing/#contributing","text":"Main Airalab repositories ~~~~~~~~~~~~~~~~~~~~~~~~~ aira <https://github.com/airalab/aira> _ - AIRA client. robonomics_comm <https://github.com/airalab/robonomics_comm> _ - Robonomics communication stack robonomics_contracts <https://github.com/airalab/robonomics_contracts> _ - smart contracts of Robonomics network Please choose a corresponding repository for reporting an issue! Found a bug? ~~~~~~~~~~~~~~~~~~~ Make sure the bug was not already reported - check GitHub Issues <https://github.com/airalab/aira/issues> _. If there is no open issue addressing the problem, open a new one <https://github.com/airalab/aira/issues/new> _. Be sure to include a title and clear description , as much relevant information as possible. Also, you can open an issue if you have a proposal for improvements. Wrote a patch that fixes a bug? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Open a new GitHub pull request with the patch. Make sure the PR description clearly describes the problem and the solution. Include the relevant issue number if applicable. Please don't fix whitespace, format code, or make a purely cosmetic patch Thanks!","title":"Contributing"},{"location":"faq/","text":"Frequently Asked Questions How to see logs from main services? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ IPFS in real time: .. code-block:: bash journalctl -u ipfs -f and Liability:: journalctl -u liability -f How to check the quantity of IPFS peers? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. code-block:: bash ipfs pubsub peers airalab.lighthouse.5.robonomics.eth IPFS can't connect to the daemon, what should I do? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Try to specify --api option .. code-block:: bash ipfs swarm peers --api=/ip4/127.0.0.1/tcp/5001/","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"How to see logs from main services? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ IPFS in real time: .. code-block:: bash journalctl -u ipfs -f and Liability:: journalctl -u liability -f How to check the quantity of IPFS peers? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .. code-block:: bash ipfs pubsub peers airalab.lighthouse.5.robonomics.eth IPFS can't connect to the daemon, what should I do? ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Try to specify --api option .. code-block:: bash ipfs swarm peers --api=/ip4/127.0.0.1/tcp/5001/","title":"Frequently Asked Questions"},{"location":"robonomics-js/beginning/","text":"Introduction Robonomics-js is a simple Javascript library for working with Robonomics network Installation npm install robonomics-js --save or yarn add robonomics-js CDN <script src= \"https://cdn.jsdelivr.net/npm/robonomics-js/dist/robonomics.min.js\" ></script> Dependencies Web3 Ipfs Initialization import Robonomics , { MessageProviderIpfsApi } from 'robonomics-js' import IPFS from 'ipfs-api' const robonomics = new Robonomics ({ provider : new MessageProviderIpfsApi ( new IPFS ( 'http://localhost:5001' )) }) robonomics . ready () . then (() => { console . log ( 'robonomics js ready' ) console . log ( 'xrt' , robonomics . xrt . address ) console . log ( 'factory' , robonomics . factory . address ) console . log ( 'lighthouse default' , robonomics . lighthouse . address ) }) Available arguments web3 - isn't necessary if Metamask <http://metamask.io/> _ is available account - isn't necessary if Metamask <http://metamask.io/> _ is available privateKey - optional provider - IPFS HTTP API version - the latest by default ens - ENS address, 0x314159265dD8dbb310642f98f50C066173C1259b <https://etherscan.io/address/0x314159265dD8dbb310642f98f50C066173C1259b> _ by default lighthouse - a lighthouse name in ENS, airalab.lighthouse.1.robonomics.eth by default","title":"Introduction"},{"location":"robonomics-js/beginning/#introduction","text":"Robonomics-js is a simple Javascript library for working with Robonomics network","title":"Introduction"},{"location":"robonomics-js/beginning/#installation","text":"npm install robonomics-js --save or yarn add robonomics-js CDN <script src= \"https://cdn.jsdelivr.net/npm/robonomics-js/dist/robonomics.min.js\" ></script>","title":"Installation"},{"location":"robonomics-js/beginning/#dependencies","text":"Web3 Ipfs","title":"Dependencies"},{"location":"robonomics-js/beginning/#initialization","text":"import Robonomics , { MessageProviderIpfsApi } from 'robonomics-js' import IPFS from 'ipfs-api' const robonomics = new Robonomics ({ provider : new MessageProviderIpfsApi ( new IPFS ( 'http://localhost:5001' )) }) robonomics . ready () . then (() => { console . log ( 'robonomics js ready' ) console . log ( 'xrt' , robonomics . xrt . address ) console . log ( 'factory' , robonomics . factory . address ) console . log ( 'lighthouse default' , robonomics . lighthouse . address ) })","title":"Initialization"},{"location":"robonomics-js/beginning/#available-arguments","text":"web3 - isn't necessary if Metamask <http://metamask.io/> _ is available account - isn't necessary if Metamask <http://metamask.io/> _ is available privateKey - optional provider - IPFS HTTP API version - the latest by default ens - ENS address, 0x314159265dD8dbb310642f98f50C066173C1259b <https://etherscan.io/address/0x314159265dD8dbb310642f98f50C066173C1259b> _ by default lighthouse - a lighthouse name in ENS, airalab.lighthouse.1.robonomics.eth by default","title":"Available arguments"}]}